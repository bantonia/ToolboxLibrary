#include <string.h>
#include <stdlib.h>
#include "StringObj.h"
#include "Object.h"

#define nullptr  0
#define npos    -1

int StringObj::defBufferBlock = StringObj::DEF_BUF_BLOCK_SIZE;

StringObj::~StringObj() {
  delete sp;
}

StringObj::StringObj() {
  bufferSize = StringObj::getDefBufferBlock();
  len = 0;
  sp = new char[bufferSize];
  sp[0] = '\0';
}

StringObj::StringObj(const char *spl) {
  bufferSize = StringObj::getDefBufferBlock();
  len = strlen(spl);
  if (len >= bufferSize) {
    bufferSize*=((len/bufferSize) + 1);
  }
  sp = new char[bufferSize];
  char *p = sp;
  const char *q = spl;
  for (int i=0; i<=len; i++, p++, q++) {
    *p = *q;
  }
}

StringObj::StringObj(const StringObj& obj) {
  bufferSize = StringObj::getDefBufferBlock();
  len = obj.len;
  if (len >= bufferSize) {
    bufferSize*=((len/bufferSize) + 1);
  }
  sp = new char[bufferSize];
  char *p = sp;
  char *q = obj.sp;
  for (int i=0; i<=len; i++, p++, q++) {
    *p = *q;
  }
}

StringObj::StringObj(int num, char c) {
  bufferSize = StringObj::getDefBufferBlock();
  if (num >= bufferSize) {
    bufferSize*=((num/bufferSize) + 1);
  }
  sp = new char[bufferSize];
  len = num;
  for (int i = 0; i<num; i++) {
    sp[i] = c;
  }
  sp[len] = '\0';
}

StringObj& StringObj::operator=(const StringObj& obj) {
  bufferSize = StringObj::getDefBufferBlock();
  len = obj.len;
  if (len >= bufferSize) {
    bufferSize*=((len/bufferSize) + 1);
  }
  sp = new char[bufferSize];
  char *p = sp;
  char *q = obj.sp;
  for (int i=0; i<=len; i++, p++, q++) {
    *p = *q;
  }
  return *this;
}

StringObj& StringObj::operator+=(const StringObj rhs) {
  if (bufferSize > len + rhs.len) {
    char *p = sp + len;
    char *q = rhs.sp;
    for (int i=0; i<=rhs.len; i++, p++, q++) {
      *p = *q;
    }
    len+=rhs.len;
  } else {
    int bufBlockSize = StringObj::getDefBufferBlock();
    bufferSize = (((len + rhs.len)/bufBlockSize) + 1) * bufBlockSize;
    char *spl = new char[bufferSize];
    
    char *p = spl;
    char *q = sp;
    for (int i=0; i<len; i++, p++, q++) {
      *p = *q;
    }
    q = rhs.sp;
    for (int j=0; j<=rhs.len; j++, p++, q++) {
      *p = *q;
    }
    delete sp;
    sp = spl;
    len+=rhs.len;
  }
  return *this;
}

StringObj StringObj::operator+(const StringObj& rhs) {
  StringObj s;
  int bufBlockSize = StringObj::getDefBufferBlock();
  s.len = this->len + rhs.len;
  s.bufferSize = ((s.len/bufBlockSize) + 1) * bufBlockSize;
  s.sp = new char[s.bufferSize];
  char *p = s.sp;
  char *q = this->sp;
  for (int i=0; i<this->len; i++, p++, q++) {
    *p = *q;
  }
  char *r = rhs.sp;
  for (i=0; i<=rhs.len; i++, p++, r++) {
    *p = *r;
  }
  return s;
}

ostream& operator<<(ostream& os, StringObj& s) {
  os << s.sp;
  return os;
}

char* StringObj::c_str() {
  sp[len] = '\0';
  return sp;
}

char* StringObj::data() {
  sp[len] = '\0';
  return sp;
}

int StringObj::length() {
  return len;
}

int StringObj::size() {
  return len;
}

int StringObj::capacity() {
  return bufferSize - 1;
}

int StringObj::max_size() {
  return bufferSize - 1;
}

int StringObj::empty() {
  return len==0;
}

void StringObj::clear() {
  delete sp;
  bufferSize = StringObj::getDefBufferBlock();
  len = 0;
  sp = new char[bufferSize];
  sp[0] = '\0';
}

void StringObj::erase() {
  delete sp;
  bufferSize = StringObj::getDefBufferBlock();
  len = 0;
  sp = new char[bufferSize];
  sp[0] = '\0';
}

char& StringObj::at(int index) {
  return sp[index];
}

char& StringObj::front() {
  return *sp;
}

char& StringObj::back() {
  return *((sp + len) - 1);
}

void StringObj::swap(StringObj& obj) {
  char *p1 = this->sp;
  char *p2 = obj.sp;
  int p1len = this->len;
  int p2len = obj.len;
  int p1bsize = this->bufferSize;
  int p2bsize = obj.bufferSize;
  this->sp = p2;
  obj.sp = p1;
  this->len = p2len;
  obj.len = p1len;
  this->bufferSize = p2bsize;
  obj.bufferSize = p1bsize;
}

int StringObj::find(char c) {
  char *p = this->sp;
  for (int i=0; i<this->len; i++, p++) {
    if (*p==c) {
      return i;
    }
  }
  return npos;
}

int StringObj::find(char c, int idx) {
  if (idx >= this->len || idx < 0) {
    return npos;
  }
  char *p = this->sp;
  for (int i=idx; i<this->len; i++, p++) {
    if (*p==c) {
      return i;
    }
  }
  return npos; 
}

int StringObj::find(const StringObj& str) {
  char *p = this->sp;
  for (int i=0; i<(this->len - str.len); i++, p++) {
    char *q = str.sp;
    if (*p==*q) {
      char *r = p;
      for (int j=0; j<str.len; j++, r++) {
        if (*r==*(q+j)) {
          if (j==str.len-1) {
            return i;
          }
        }
      }
    }
  }
  return npos;
}

int StringObj::rfind(char c) {
  char *p = this->sp;
  p+=(this->len - 1);
  for (int i=this->len-1; i>=0; i--, p--) {
    if (*p==c) {
      return i;
    }
  }
  return npos;
}

int StringObj::rfind(char c, int idx) {
  if (idx >= this->len || idx < 0) {
    return npos;
  }
  char *p = this->sp;
  p+=idx;
  for (int i=idx; i>=0; i--, p--) {
    if (*p==c) {
      return i;
    }
  }
  return npos;
}

int StringObj::getDefBufferBlock() {
  return StringObj::defBufferBlock;
}

void StringObj::setDefBufferBlock(int size) {
  StringObj::defBufferBlock = size;
}

int StringObj::getBufferSize() {
  return bufferSize;
}
