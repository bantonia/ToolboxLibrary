#include "kernel.h"
#include "ToolboxObj.h"

_kernel_oserror ToolboxObj::ToolboxObjectIdNotSet = {0x8888,"Toolbox ObjectId not set"};

ToolboxObj::ToolboxObj() {
  id = 0;
  flags = 0;
  objClass = 0;
}

ToolboxObj::ToolboxObj(ObjectId id) {
  setFlags(0);
  this->id = id;
  deleteFlag = 0;
  objClass = setFlags(0).getObjectClass();
}

ToolboxObj::ToolboxObj(unsigned int flags, void *name_or_template) {
  setFlags(flags);
  id = ToolboxObj::createObject(name_or_template);
  deleteFlag = 0;
  objClass = setFlags(0).getObjectClass();
}

ToolboxObj::~ToolboxObj() {
  deleteObject();
}

void ToolboxObj::getTemplateName(char *buffer, int  buff_size, int *nbytes) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  in.r[2] = (int) buffer;
  in.r[3] = buff_size;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetTemplateName, &in, &out), __LINE__);
  *nbytes = out.r[3];
}

ObjectId ToolboxObj::createObject(void *name_or_template) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = (int) name_or_template;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_CreateObject, &in, &out), __LINE__);
  return out.r[0];
}

void ToolboxObj::deleteObject() {
  _kernel_swi_regs in, out;
  in.r[0] = (int) deleteFlag;
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_DeleteObject, &in, &out), __LINE__);
}

ToolboxObj& ToolboxObj::showObject(int show_type, void *type, ObjectId parent, ComponentId parent_component) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  in.r[2] = show_type;
  in.r[3] = (int) type;
  in.r[4] = parent;
  in.r[5] = parent_component;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_ShowObject, &in, &out), __LINE__);
  return *this;
}

ToolboxObj& ToolboxObj::hideObject() {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_HideObject, &in, &out), __LINE__);
  return *this;
}

unsigned int ToolboxObj::getObjectState(unsigned int *state) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetObjectState, &in, &out), __LINE__);
  *state = (unsigned int) out.r[0];
  return (unsigned int) out.r[0];
}

ToolboxObj& ToolboxObj::setClientHandle(void *client_handle) {
  //unsigned int *p = (unsigned int *) client_handle;
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id; 
  in.r[2] = (int) *((unsigned int *) client_handle);
  ToolboxObj::setLastError(_kernel_swi(Toolbox_SetClientHandle, &in, &out), __LINE__);
  return *this;
}

unsigned int ToolboxObj::getClientHandle(void *client_handle) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetClientHandle, &in, &out), __LINE__);
  *((unsigned int *)client_handle) = (unsigned int) out.r[0];
  return (unsigned int) out.r[0];
}

ObjectClass ToolboxObj::getObjectClass() {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetObjectClass, &in, &out), __LINE__);
  objClass = out.r[0];
  return out.r[0];
}

ObjectClass ToolboxObj::readObjectClass() {
  return objClass;
}

ObjectId ToolboxObj::getParent() {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetParent, &in, &out), __LINE__);
  parent = out.r[0];
  parentComponent = out.r[1];
  return parentComponent;
}

ObjectId ToolboxObj::getAncestor() {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_GetAncestor, &in, &out), __LINE__);
  ancestor = out.r[0];
  ancestorComponent = out.r[1];
  return ancestorComponent;
}

ToolboxObj& ToolboxObj::raiseToolboxEvent(ComponentId component, ToolboxEvent *event) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  in.r[2] = component;
  in.r[3] = (int) event;
  ToolboxObj::setLastError(_kernel_swi(Toolbox_RaiseToolboxEvent, &in, &out), __LINE__);
 return *this;
}

ToolboxObj& ToolboxObj::objectMiscOp(_kernel_swi_regs *regs) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) getFlags();
  in.r[1] = id;
  in.r[2] = regs->r[2];
  in.r[3] = regs->r[3];
  in.r[4] = regs->r[4];
  in.r[5] = regs->r[5];
  in.r[6] = regs->r[6];
  in.r[7] = regs->r[7];
  in.r[8] = regs->r[8];
  in.r[9] = regs->r[9];
  ToolboxObj::setLastError(_kernel_swi(Toolbox_ObjectMiscOp, &in, &out), __LINE__);
  regs->r[0] = out.r[0];
  regs->r[1] = out.r[1];
  regs->r[2] = out.r[2];
  regs->r[3] = out.r[3];
  regs->r[4] = out.r[4];
  regs->r[5] = out.r[5];
  regs->r[6] = out.r[6];
  regs->r[7] = out.r[7];
  regs->r[8] = out.r[8];
  regs->r[9] = out.r[9];
  return *this;
}

ObjectId ToolboxObj::readObjectId() {
  return id;
}

ObjectId ToolboxObj::readParentObjectId() {
  return parent;
}

ObjectId ToolboxObj::readAncestorObjectId() {
  return ancestor;
}

ToolboxObj& ToolboxObj::setFlags(unsigned int flags) {
  ToolboxObj::flags = flags;
  return *this;
}

ToolboxObj& ToolboxObj::clearFlags() {
  flags = 0;
  return *this;
}

unsigned int ToolboxObj::getFlags() {
  return flags;
}


ToolboxObj& ToolboxObj::setObjectId(ObjectId id) {
  if (this->id == 0) {
    this->id = id;
    objClass = setFlags(0).getObjectClass();
  }
  return *this;
}
