#include "ToolboxCoreObj.h"
#include "ToolboxEventObj.h"

void ToolboxEventObj::initEvents() {
  event_initialise (&ToolboxCoreObj::idBlock);
  event_register_toolbox_handler(-1, Toolbox_Error, (ToolboxEventHandler *)ToolboxEventObj::toolboxErrorEvent, NULL);
  event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, (ToolboxEventHandler *)ToolboxEventObj::toolboxObjectAutoCreatedEvent, NULL);
  event_register_toolbox_handler(-1, Toolbox_ObjectDeleted, (ToolboxEventHandler *)ToolboxEventObj::toolboxObjectDeletedEvent, NULL);
}

int ToolboxEventObj::toolboxErrorEvent(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) {
  return toolboxErrorHandler(event_code, event, id_block, handle);
}

int ToolboxEventObj::toolboxObjectAutoCreatedEvent(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) {
  return toolboxObjectAutoCreatedHandler(event_code, event, id_block, handle);
}

int ToolboxEventObj::toolboxObjectDeletedEvent(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) {
  return toolboxObjectDeletedHandler(event_code, event, id_block, handle);
}

int ToolboxEventObj::toolboxErrorHandler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) { UNUSED(event_code); UNUSED(event); UNUSED(id_block); UNUSED(handle); return 0; }

int ToolboxEventObj::toolboxObjectAutoCreatedHandler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) { UNUSED(event_code); UNUSED(event); UNUSED(id_block); UNUSED(handle); return 0; }

int ToolboxEventObj::toolboxObjectDeletedHandler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) { UNUSED(event_code); UNUSED(event); UNUSED(id_block); UNUSED(handle); return 0; }

/*int ToolboxEventObj::toolboxObjectAutoCreatedHandler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle) {
  UNUSED(event_code);
  UNUSED(event);
  UNUSED(handle);
  int object_class;
  ToolboxCoreObj::getObjectClass(0, id_block->self_id, &object_class);
  switch(object_class) {
    case ColourDbox_ObjectClass: break;
    case ColourMenu_ObjectClass: break;
    case DCS_ObjectClass: break;
    case FileInfo_ObjectClass: break;
    case FontDbox_ObjectClass: break;
    case FontMenu_ObjectClass: break;
    case Iconbar_ObjectClass: break;
    case Menu_ObjectClass: break;
    case PrintDbox_ObjectClass: break;
    case ProgInfo_ObjectClass: break;
    case Quit_ObjectClass: break;
    case SaveAs_ObjectClass: break;
    case Scale_ObjectClass: break;
    case Window_ObjectClass:
      toolboxAutoGeneratedIds->addValue((ToolboxObj *)new ToolboxWindowObj());
      break;
    default: break;
  }

  return object_class;
}*/
