#include "kernel.h"
#include "ToolboxCoreObj.h"
//#include "ToolboxWindowObj.h"

/*#include "colourdbox.h"
#include "colourmenu.h"
#include "dcs.h"
#include "fileinfo.h"
#include "fontdbox.h"
#include "fontmenu.h"
#include "iconbar.h"
#include "menu.h"
#include "printdbox.h"
#include "proginfo.h"
#include "quit.h"
#include "saveas.h"
#include "scale.h"*/
#include "window.h"

int ToolboxCoreObj::wimpVersion = 310;
int ToolboxCoreObj::taskHandle;
void *ToolboxCoreObj::spriteAreaPtr;
//ToolboxObjectList *ToolboxCoreObj::toolboxAutoGeneratedIds = NULL;
IdBlock ToolboxCoreObj::idBlock;
int ToolboxCoreObj::wimpMessages = 0;
int ToolboxCoreObj::toolboxEvents = 0;
MessagesFD ToolboxCoreObj::mfd;
WimpPollBlock ToolboxCoreObj::pollBlock;
int ToolboxCoreObj::eventCode;

void ToolboxCoreObj::getSysInfo(unsigned int reason_code, _kernel_swi_regs *in) {
  _kernel_swi_regs out;
  in->r[0] = reason_code;
  int r1 = in->r[1];
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetSysInfo, in, &out), __LINE__);
  switch(reason_code) {
    case 0:
    case 2:
      switch(r1) {
        case 0:
          in->r[2] = out.r[2];
          break;
        default:
          in->r[1] = out.r[1];
          break;
      }
      break;
    case 1:
      in->r[1] = out.r[1];
    case 3:
    case 4:
      in->r[0] = out.r[0];
      break;
    default:
      break;
  }
}

/*void ToolboxCoreObj::getTemplateName(int flags, ObjectId id, char *buffer, int  buff_size, int *nbytes) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  in.r[2] = (int) buffer;
  in.r[3] = buff_size;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetTemplateName, &in, &out), __LINE__);
  *nbytes = out.r[3];
}*/

ObjectId ToolboxCoreObj::createObject(unsigned int flags, void *name_or_template) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = (int) name_or_template;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_CreateObject, &in, &out), __LINE__);
  return out.r[0];
}

void ToolboxCoreObj::deleteObject(unsigned int flags, ObjectId id) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_DeleteObject, &in, &out), __LINE__);
}

void ToolboxCoreObj::showObject(unsigned int flags, ObjectId id, int show_type, void *type, ObjectId parent, ComponentId parent_component) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  in.r[2] = show_type;
  in.r[3] = (int) type;
  in.r[4] = parent;
  in.r[5] = parent_component;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_ShowObject, &in, &out), __LINE__);
}

void ToolboxCoreObj::hideObject(unsigned int flags, ObjectId id) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_HideObject, &in, &out), __LINE__);
}

unsigned int ToolboxCoreObj::getObjectState(unsigned int flags, ObjectId id, unsigned int *state) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetObjectState, &in, &out), __LINE__);
  *state = (unsigned int) out.r[0];
  return (unsigned int) out.r[0];
}

void ToolboxCoreObj::setClientHandle(unsigned int flags, ObjectId id, void *client_handle) {
  //unsigned int *p = (unsigned int *) client_handle;
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id; 
  in.r[2] = (int) *((unsigned int *) client_handle);
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_SetClientHandle, &in, &out), __LINE__);
}

unsigned int ToolboxCoreObj::getClientHandle(unsigned int flags, ObjectId id, void *client_handle) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetClientHandle, &in, &out), __LINE__);
  *((unsigned int *)client_handle) = (unsigned int) out.r[0];
  return (unsigned int) out.r[0];
}

ObjectClass ToolboxCoreObj::getObjectClass(unsigned int flags, ObjectId id) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetObjectClass, &in, &out), __LINE__);
  return out.r[0];
}

ObjectClass ToolboxCoreObj::getObjectClass(unsigned int flags, ObjectId id, ObjectClass *object_class) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetObjectClass, &in, &out), __LINE__);
  *object_class = out.r[0];
  return out.r[0];
}

void ToolboxCoreObj::getParent(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *parent_component) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetParent, &in, &out), __LINE__);
  *parent = out.r[0];
  *parent_component = out.r[1];
}


void ToolboxCoreObj::getAncestor(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *ancestor_component) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_GetAncestor, &in, &out), __LINE__);
  *parent = out.r[0];
  *ancestor_component = out.r[1];
}

void ToolboxCoreObj::raiseToolboxEvent(unsigned int flags, ObjectId id, ComponentId component, ToolboxEvent *event) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = id;
  in.r[2] = component;
  in.r[3] = (int) event;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_RaiseToolboxEvent, &in, &out), __LINE__);
}

void ToolboxCoreObj::toolboxLoadResources(unsigned int flags, char *resources) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = (int) resources;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_LoadResources, &in, &out), __LINE__);
}

/* void *ToolboxCoreObj::templateLookup(unsigned int flags, char *name)  *
   Returns pointer to a block suitable to pass to Toolbox_CreateObject *
 * or Window_ExtractGadget                                             */

void *ToolboxCoreObj::templateLookup(unsigned int flags, char *name) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = (int) name;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_TemplateLookUp, &in, &out), __LINE__);
  return (unsigned int *)in.r[0];
}

/* int ToolboxCoreObj::init(unsigned int flags, int *wimpMessages, int *toolboxEvents, char *directory, MessagesFD *mfd, IdBlock *idb)
 * Returns the task handle */

int ToolboxCoreObj::init(unsigned int flags, int *wimpMessages, int *toolboxEvents, char *directory, MessagesFD *mfd, IdBlock *idb) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  in.r[1] = wimpVersion;
  in.r[2] = (int) wimpMessages;
  in.r[3] = (int) toolboxEvents;
  in.r[4] = (int) directory;
  in.r[5] = (int) mfd;
  in.r[6] = (int) idb;
  ToolboxCoreObj::setLastError(_kernel_swi(Toolbox_Initialise, &in, &out), __LINE__);
  wimpVersion = out.r[0];
  taskHandle = out.r[1];
  spriteAreaPtr = (void *) out.r[2];
  return taskHandle;
}

int ToolboxCoreObj::getWimpVersion() {
  return wimpVersion;
}

void ToolboxCoreObj::setWimpVersion(int version) {
  wimpVersion = version;
}

int ToolboxCoreObj::getTaskHandle() {
  return taskHandle;
}

void *ToolboxCoreObj::getSpriteAreaPtr() {
  return spriteAreaPtr;
}

void ToolboxCoreObj::getPointerInfo(unsigned int flags, int& x_pos, int& y_pos, int& buttons, ObjectId& window, ComponentId& component) {
  _kernel_swi_regs in, out;
  in.r[0] = (int) flags;
  ToolboxCoreObj::setLastError(_kernel_swi(Window_GetPointerInfo, &in, &out), __LINE__);
  x_pos = out.r[0];
  y_pos = out.r[1];
  buttons = out.r[2];
  window = out.r[3];
  component = out.r[4];
}

void ToolboxCoreObj::eToolboxEventHandler(void *pollBlock) {
  ToolboxEventHeader *tboxHdr = (ToolboxEventHeader *)pollBlock;
  switch(tboxHdr->event_code) {
    case Toolbox_Error:
      toolboxError();
      break;
    case Toolbox_ObjectAutoCreated: {
        switch(ToolboxCoreObj::getObjectClass(0, ToolboxCoreObj::idBlock.self_id)) {
          case 0x829c0: //ColourDbox_ObjectClass
            colourDboxObjectAutoCreated();
            break;
          case 0x82980: //ColourMenu_ObjectClass
            colourMenuObjectAutoCreated();
            break;
          case 0x82a80: //DCS_ObjectClass
            dcsObjectAutoCreated();
            break;
          case 0x82ac0: //FileInfo_ObjectClass
            fileInfoObjectAutoCreated();
            break;
          case 0x82a00: //FontDbox_ObjectClass
            fontDboxObjectAutoCreated();
            break;
          case 0x82a40: //FontMenu_ObjectClass
            fontMenuObjectAutoCreated();
            break;
          case 0x82900: //Iconbar_ObjectClass
            iconbarObjectAutoCreated();
            break;
          case 0x828c0: //Menu_ObjectClass
            menuObjectAutoCreated();
            break;
          case 0x82b00: //PrintDbox_ObjectClass
            printDboxObjectAutoCreated();
            break;
          case 0x82b40: //ProgInfo_ObjectClass
            progInfoObjectAutoCreated();
            break;
          case 0x82a90: //Quit_ObjectClass
            quitObjectAutoCreated();
            break;
          case 0x82bc0: //SaveAs_ObjectClass
            saveAsObjectAutoCreated();
            break;
          case 0x82c00: //Scale_ObjectClass
            scaleObjectAutoCreated();
            break;
          case 0x82880: //Window_ObjectClass
            windowObjectAutoCreated();
            break;
          default:
            unknownClassObjectAutoCreated();
            break;
        }
        //toolboxObjectAutoCreated();
        break;
      }
    case Toolbox_ObjectDeleted:
      toolboxObjectDeleted();
      break;
    case 0x829c0:
      colourDboxAboutToBeShown();
      break;
    case 0x829c1:
      colourDboxDialogueCompleted();
      break;
    case 0x829c2:
      colourDboxColourSelected();
      break;
    case 0x82980:
      colourMenuAboutToBeShown();
      break;
    case 0x82981:
      colourMenuHasBeenHidden();
      break;
    case 0x82982:
      colourMenuSelection();
      break;
    case 0x82a80:
      dcsAboutToBeShown();
      break;
    case 0x82a81:
      dcsDiscard();
      break;
    case 0x82a82:
      dcsSave();
      break;
    case 0x82a83:
      dcsDialogueCompleted();
      break;
    case 0x82a84:
      dcsCancel();
      break;
    case 0x82ac0:
      fileInfoAboutToBeShown();
      break;
    case 0x82ac1:
      fileInfoDialogueCompleted();
      break;
    case 0x82a00:
      fontDboxAboutToBeShown();
      break;
    case 0x82a01:
      fontDboxDialogueCompleted();
      break;
    case 0x82a02:
      fontDboxApplyFont();
      break;
    case 0x82a40:
      fontMenuAboutToBeShown();
      break;
    case 0x82a41:
      fontMenuHasBeenHidden();
      break;
    case 0x82a42:
      fontMenuFontSelection();
      break;
    case 0x82900:
      iconbarClicked();
      break;
    case 0x82901:
      iconbarSelectAboutToBeShown();
      break;
    case 0x82902:
      iconbarAdjustAboutToBeShown();
      break;
    case 0x828c0:
      menuAboutToBeShown();
      break;
    case 0x828c1:
      menuHasBeenHidden();
      break;
    case 0x828c2:
      menuSubMenu();
      break;
    case 0x828c3:
      menuSelection();
      break;
    case 0x82b00:
      printDboxAboutToBeShown();
      break;
    case 0x82b01:
      printDboxDialogueCompleted();
      break;
    case 0x82b02:
      printDboxSetUpAboutToBeShown();
      break;
    case 0x82b03:
      printDboxSave();
      break;
    case 0x82b04:
      printDboxSetUp();
      break;
    case 0x82b05:
      printDboxPrint();
      break;
    case 0x82b40:
      progInfoAboutToBeShown();
      break;
    case 0x82b41:
      progInfoDialogueCompleted();
      break;
    case 0x82a90:
      quitAboutToBeShown();
      break;
    case 0x82a91:
      quitQuit();
      break;
    case 0x82a92:
      quitDialogueCompleted();
      break;
    case 0x82a93:
      quitCancel();
      break;
    case 0x82bc0:
      saveAsAboutToBeShown();
      break;
    case 0x82bc1:
      saveAsDialogueCompleted();
      break;
    case 0x82bc2:
      saveAsSaveToFile();
      break;
    case 0x82bc3:
      saveAsFillBuffer();
      break;
    case 0x82bc4:
      saveAsSaveCompleted();
      break;
    case 0x82c00:
      scaleAboutToBeShown();
      break;
    case 0x82c01:
      scaleDialogueCompleted();
      break;
    case 0x82c02:
      scaleApplyFactor();
      break;
    case 0x82880:
      windowAboutToBeShown();
      break;
    case 0x82890:
      windowHasBeenHidden();
      break;
    case 0x82881:
      actionButtonSelected();
      break;
    case 0x8288c:
      adjusterClicked();
      break;
    case 0x82887:
      draggableDragStarted();
      break;
    case 0x82888:
      draggableDragEnded();
      break;
    case 0x8288d:
      numberRangeValueChanged();
      break;
    case 0x82882:
      optionButtonStateChanged();
      break;
    case 0x8288b:
      popUpAboutToBeShown();
      break;
    case 0x82883:
      radioButtonStateChanged();
      break;
    case 0x82886:
      sliderValueChanged();
      break;
    case 0x8288e:
      stringSetValueChanged();
      break;
    case 0x8288f:
      stringSetAboutToBeShown();
      break;
    case 0x82885:
      writableFieldValueChanged();
      break;
    case 0x1402c0:
      tabsSelection();
      break;
    case 0x140280:
      treeViewNodeSelected();
      break;
    case 0x140281:
      treeViewNodeExpanded();
      break;
    case 0x140282:
      treeViewNodeRenamed();
      break;
    case 0x140283:
      treeViewNodeClicked();
      break;
    case 0x140284:
      treeViewNodeDragged();
      break;
    case 0x140285:
      treeViewScroll();
      break;
    default:
      if (tboxHdr->event_code > 0 && tboxHdr->event_code < 0x10000) {
        toolboxUserEvent();
      } else {
        if (tboxHdr->event_code >= 0x10000 && tboxHdr->event_code < 0x40000) {
          reservedToolboxInterApplicationProtocol();
        } else {
          if (tboxHdr->event_code >= 0x40000 && tboxHdr->event_code < 0xa0000) {
            reservedToolboxModuleEvent();
          } else {
            unknownToolboxEvent();
          }
        }
      }
      break;
  }
}




