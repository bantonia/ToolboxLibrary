#include "Prog.h"

Prog::Prog() {
  mainWindow = NULL;
  w = NULL;
}

Prog::~Prog() {
  if (mainWindow != NULL) delete mainWindow;
  if (w != NULL) delete w;
}

void Prog::toolboxEventHandler(int event) {
  switch(event) {
    case ToolboxEvents::AdjusterClicked:
      adjusterClicked();
      break;
    case ToolboxEvents::SliderValueChanged:
      sliderValueChanged();
      break;
    case ToolboxEvents::RadioButtonStateChanged:
      radioButtonStateChanged();
      break;
    case ToolboxEvents::ScrollListSelection:
      scrollListSelection();
      break;
    case ToolboxEvents::ToolActionSelection:
      toolActionSelection();
      break;
  }
}

void Prog::toolboxObjectAutoCreated(int object_class) {
  switch(object_class) {
    case ToolboxEvents::WindowObjectClass:
      windowObjectAutoCreated();
      break;
    case ToolboxEvents::IconbarObjectClass:
      iconbarObjectAutoCreated();
      break;
  }
}

void Prog::toolActionSelection() {
  ToolActionSelectionEvent *pollEvent = (ToolActionSelectionEvent *) this->getPollBlock();
  IdBlock *idBlock = &ToolboxCoreObj::idBlock;
  mainWindow->setToolActionIdent("Hello");
}

void Prog::unknownToolboxEvent() {
  IdBlock *idBlock = &ToolboxCoreObj::idBlock;
}

void Prog::scrollListSelection() {
  ScrollListSelectionEvent *pollEvent = (ScrollListSelectionEvent *) getPollBlock();
  IdBlock *idBlock = &ToolboxCoreObj::idBlock;
}

void Prog::menuAboutToBeShown() {
  MenuAboutToBeShownEvent *pollEvent = (MenuAboutToBeShownEvent *) getPollBlock();
  IdBlock *idBlock = &ToolboxCoreObj::idBlock; 
}

void Prog::windowObjectAutoCreated() {
  ToolboxObjectAutoCreatedEvent *pollEvent = (ToolboxObjectAutoCreatedEvent *) getPollBlock();
  ToolboxWindowObj *window = new ToolboxWindowObj();
  window->setFlags(0).setObjectId(ToolboxCoreObj::idBlock.self_id);
  if (window->isTemplate("Window")) {
    mainWindow = new MainWindow(window);
    mainWindow->w->setTitle("w2");
    mainWindow->df3->setValue(mainWindow->rb1->getOnButton());
    mainWindow->storeValues();
  }
  if (window->isTemplate("Window_1")) {
    w = window;
    w->setTitle("w1");
  }
}

void Prog::adjusterClicked() {
  AdjusterClickedEvent *pollEvent = (AdjusterClickedEvent *) getPollBlock();
  if (ToolboxCoreObj::idBlock.self_id == mainWindow->w->readObjectId() && (ToolboxCoreObj::idBlock.self_component == MainWindow::MWAdjusterRight || ToolboxCoreObj::idBlock.self_component == MainWindow::MWAdjusterLeft)) {
    int id = ToolboxCoreObj::idBlock.self_component;
    switch(pollEvent->direction) {
      case Adjuster_Decrement: {
          mainWindow->slider->setValue(mainWindow->slider->getValue() - 1);
        }
        break;
      case Adjuster_Increment: {
          mainWindow->slider->setValue(mainWindow->slider->getValue() + 1);
        }
        break;
      default:
        break;
    }
    mainWindow->df2->setValue(mainWindow->slider->getValue());
  }
}

void Prog::sliderValueChanged() {
  if (ToolboxCoreObj::idBlock.self_id == mainWindow->w->readObjectId()) {
    mainWindow->df2->setValue(mainWindow->slider->getValue());
  }
}

void Prog::iconbarObjectAutoCreated() {
  ToolboxObjectAutoCreatedEvent *pollEvent = (ToolboxObjectAutoCreatedEvent *) getPollBlock();
  iconbar = new ToolboxIconbarObj();
  iconbar->setFlags(0).setObjectId(ToolboxCoreObj::idBlock.self_id).setText("Worked");
}

void Prog::toolboxUserEvent(int event) {
  //ToolboxEventHeader *tboxHdr = (ToolboxEventHeader *) getPollBlock();
  switch(event /*tboxHdr->event_code*/) {
    case Quit: {
        closeDown();
      }
      break;
    case ButtonAction1: {
        mainWindow->w->setTitle("Hello");
        mainWindow->df1->setValue(mainWindow->df1->getType());
        iconbar->setText("AB1");
        mainWindow->setToolActionIdent("ToolAction");
        w->setTitle("Rhubarb");
      }
      break;
    case ButtonAction2: {
        mainWindow->w->setTitle("Rhubarb");
        mainWindow->df1->setValue(mainWindow->ab2->getType());
        iconbar->setText("AB2");
        w->setTitle("Hello");
      }
      break;
    case PopupMenuReset: {
        mainWindow->restoreValues();
      }
      break;
    default:
      break;
  }
}

void Prog::radioButtonStateChanged() {
  mainWindow->df3->setValue(mainWindow->rb1->getOnButton());
}


