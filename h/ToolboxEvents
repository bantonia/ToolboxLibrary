#ifndef __cplusplus
#error Header file "ToolboxEvents.h" may only be used from C++
#endif
#pragma force_top_level
#pragma include_only_once

#ifndef __ToolboxEvents_h
#define __ToolboxEvents_h

#include "toolbox.h"
#include "gadgets.h"
#include "treeview.h"
#include "ScrollList.h"
#include "tabs.h"

class ToolboxEvents {
  public:

    enum Toolbox_Event {
    
      Error                        =  0x44ec0,
      ObjectAutoCreated,           // 0x44ec1
      ObjectDeleted,               // 0x44ec2

      WindowAboutToBeShown         =  0x82880,
      ActionButtonSelected,        // 0x82881
      OptionButtonStateChanged,    // 0x82882
      RadioButtonStateChanged,     // 0x82883

      WritableFieldValueChanged    =  0x82885,
      SliderValueChanged,          // 0x82886
      DraggableDragStarted,        // 0x82887
      DraggableDragEnded,          // 0x82888

      PopUpAboutToBeShown          =  0x8288b,
      AdjusterClicked,             // 0x8288c
      NumberRangeValueChanged,     // 0x8288d
      StringSetValueChanged,       // 0x8288e
      StringSetAboutToBeShown,     // 0x8288f
      WindowHasBeenHidden,         // 0x82890

      MenuAboutToBeShown           =  0x828c0,
      MenuHasBeenHidden,           // 0x828c1
      MenuSubMenu,                 // 0x828c2
      MenuSelection,               // 0x828c3

      IconbarClicked               =  0x82900,
      IconbarSelectAboutToBeShown, // 0x82901
      IconbarAdjustAboutToBeShown, // 0x82902

      ColourMenuAboutToBeShown     =  0x82980,
      ColourMenuHasBeenHidden,     // 0x82981
      ColourMenuSelection,         // 0x82982

      ColourDboxAboutToBeShown     =  0x829c0,
      ColourDboxDialogueCompleted, // 0x829c1
      ColourDboxColourSelected,    // 0x829c2

      FontDboxAboutToBeShown       =  0x82a00,
      FontDboxDialogueCompleted,   // 0x82a01
      FontDboxApplyFont,           // 0x82a02

      FontMenuAboutToBeShown       =  0x82a40,
      FontMenuHasBeenHidden,       // 0x82a41
      FontMenuFontSelection,       // 0x82a42

      DCSAboutToBeShown            =  0x82a80,
      DCSDiscard,                  // 0x82a81
      DCSSave,                     // 0x82a82
      DCSDialogueCompleted,        // 0x82a83
      DCSCancel,                   // 0x82a84

      QuitAboutToBeShown           =  0x82a90,
      QuitQuit,                    // 0x82a91
      QuitDialogueCompleted,       // 0x82a92
      QuitCancel,                  // 0x82a93

      FileInfoAboutToBeShown       =  0x82ac0,
      FileInfoDialogueCompleted,   // 0x82ac1
  
      PrintDboxAboutToBeShown      =  0x82b00,
      PrintDboxDialogueCompleted,  // 0x82b01
      PrintDboxSetUpAboutToBeShown,// 0x82b02
      PrintDboxSave,               // 0x82b03
      PrintDboxSetUp,              // 0x82b04
      PrintDboxPrint,              // 0x82b05

      ProgInfoAboutToBeShown       =  0x82b40,
      ProgInfoDialogueCompleted,   // 0x82b41
      ProgInfoLaunchWebPage,       // 0x82b42


      SaveAsAboutToBeShown         =  0x82bc0,
      SaveAsDialogueCompleted,     // 0x82bc1
      SaveAsSaveToFile,            // 0x82bc2
      SaveAsFillBuffer,            // 0x82bc3
      SaveAsSaveCompleted,         // 0x82bc4

      ScaleAboutToBeShown          =  0x82c00,
      ScaleDialogueCompleted,      // 0x82c01
      ScaleApplyFactor,            // 0x82c02

      ToolActionSelection          =  0x140140,

      ScrollListSelection          =  0x140181,

      TreeViewNodeSelected         =  0x140280,
      TreeViewNodeExpanded,        // 0x140281
      TreeViewNodeRenamed,         // 0x140282
      TreeViewNodeClicked,         // 0x140283
      TreeViewNodeDragged,         // 0x140284
      TreeViewScroll,              // 0x140285

      TabsSelection                =  0x1402c0
    };

    enum Toolbox_ObjectClass {
      WindowObjectClass     = 0x82880,
      MenuObjectClass       = 0x828c0,
      IconbarObjectClass    = 0x82900,
      ColourMenuObjectClass = 0x82980,
      ColourDboxObjectClass = 0x829c0,
      FontDboxObjectClass   = 0x82a00,
      FontMenuObjectClass   = 0x82a40,
      DCSObjectClass        = 0x82a80,
      QuitObjectClass       = 0x82a90,
      FileInfoObjectClass   = 0x82ac0,
      PrintDboxObjectClass  = 0x82b00,
      ProgInfoObjectClass   = 0x82b40,
      SaveAsObjectClass     = 0x82bc0,
      ScaleObjectClass      = 0x82c00,
    };

/** Event handler colourDboxObjectAutoCreated.
* Overload in users application to intercept creation of Colour Dialogue box objects to enable modification
* before they are made visible.
* \code{.cpp}
* #include <string.h>
* #include "ToolboxColourDlogObj.h"
*
* // Change "Application" to the name of your Class, dbox being a pointer member variable of class ToolboxColourDlogObj in your Class.
* // Access the Wimp Handle and Dialogue Handle when the Colour Dialogue box is visible.
* void Application::colourDboxObjectAutoCreated() {
*   ToolboxObjectAutoCreatedEvent *pollEvent = (ToolboxObjectAutoCreatedEvent *) this->getPollBlock();
*   if (strcmp(pollEvent->template_name, "ColourDbox") == 0) {
*     dbox = new ToolboxColourDlogObj();
*     dbox->setFlags(0).setObjectId(ToolboxCoreObj::idBlock.self_id);
*   }
* }
* \endcode
*
*/
    virtual void colourDboxObjectAutoCreated(){}

/** Event handler colourMenuObjectAutoCreated.
* Overload in users application to intercept creation of Colour Menu objects to enable modification
* before they are made visible.
*/
    virtual void colourMenuObjectAutoCreated(){}

/** Event handler dcsObjectAutoCreated.
* Overload in users application to intercept creation of Discard/Cancel/Save Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void dcsObjectAutoCreated(){}

/** Event handler fileInfoObjectAutoCreated.
* Overload in users application to intercept creation of File Info Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void fileInfoObjectAutoCreated(){}

/** Event handler fontDboxObjectAutoCreated.
* Overload in users application to intercept creation of Font Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void fontDboxObjectAutoCreated(){}

/** Event handler fontMenuObjectAutoCreated.
* Overload in users application to intercept creation of Font Menu objects to enable modification
* before they are made visible.
*/
    virtual void fontMenuObjectAutoCreated(){}

/** Event handler iconbarObjectAutoCreated.
* Overload in users application to intercept creation of Iconbar icon objects to enable modification
* before they are made visible.
*/
    virtual void iconbarObjectAutoCreated(){}


/** Event handler menuObjectAutoCreated.
* Overload in users application to intercept creation of Menu objects to enable modification
* before they are made visible.
*/
    virtual void menuObjectAutoCreated(){}

/** Event handler printDboxObjectAutoCreated.
* Overload in users application to intercept creation of Print Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void printDboxObjectAutoCreated(){}

/** Event handler progInfoObjectAutoCreated.
* Overload in users application to intercept creation of Prog Info Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void progInfoObjectAutoCreated(){}

/** Event handler quitObjectAutoCreated.
* Overload in users application to intercept creation of Quit Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void quitObjectAutoCreated(){}

/** Event handler saveAsObjectAutoCreated.
* Overload in users application to intercept creation of SaveAs Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void saveAsObjectAutoCreated(){}

/** Event handler scaleObjectAutoCreated.
* Overload in users application to intercept creation of Scale Dialogue box objects to enable modification
* before they are made visible.
*/
    virtual void scaleObjectAutoCreated(){}

/** Event handler windowObjectAutoCreated.
* Overload in users application to intercept creation of Window objects to enable modification
* before they are made visible.
*/
    virtual void windowObjectAutoCreated(){}

/** Event handler unknownClassObjectAutoCreated.
* Overload in users application to intercept creation of an unknown Toolbox object to enable modification
* before they are made visible. This could be when new Toolbox objects are created which are unknown to this library.
*/
    virtual void unknownClassObjectAutoCreated(){}


    virtual void toolboxObjectAutoCreated(int objClass){ objClass = objClass;}
    virtual void toolboxObjectDeleted(){}
    //virtual void toolboxUserEvent(){}
    virtual void toolboxUserEvent(int){}

/** Event handler colourDboxAboutToBeShown.
* Overload colourDboxAboutToBeShown() to handle the event and use something like the following to access event parametes
* ColourDboxAboutToBeShownEvent *pollEvent = (ColourDboxAboutToBeShownEvent *) getPollBlock();
* IdBlock *idBlock = &ToolboxCoreObj::idBlock;
*/
    virtual void colourDboxAboutToBeShown(){}      // ColourDboxAboutToBeShownEvent

    virtual void colourDboxDialogueCompleted(){}   // ColourDboxDialogueCompletedEvent
    virtual void colourDboxColourSelected(){}      // ColourDboxColourSelectedEvent
    virtual void colourMenuAboutToBeShown(){}      // ColourMenuAboutToBeShownEvent
    virtual void colourMenuHasBeenHidden(){}       // ColourMenuHasBeenHiddenEvent
    virtual void colourMenuSelection(){}           // ColourMenuSelectionEvent
    virtual void dcsAboutToBeShown(){}
    virtual void dcsDiscard(){}
    virtual void dcsSave(){}
    virtual void dcsDialogueCompleted(){}
    virtual void dcsCancel(){}
    virtual void fileInfoAboutToBeShown(){}
    virtual void fileInfoDialogueCompleted(){}
    virtual void fontDboxAboutToBeShown(){}
    virtual void fontDboxDialogueCompleted(){}
    virtual void fontDboxApplyFont(){}
    virtual void fontMenuAboutToBeShown(){}
    virtual void fontMenuHasBeenHidden(){}
    virtual void fontMenuFontSelection(){}
    virtual void iconbarClicked(){}
    virtual void iconbarSelectAboutToBeShown(){}
    virtual void iconbarAdjustAboutToBeShown(){}
    virtual void menuAboutToBeShown(){}
    virtual void menuHasBeenHidden(){}
    virtual void menuSubMenu(){}
    virtual void menuSelection(){}
    virtual void printDboxAboutToBeShown(){}
    virtual void printDboxDialogueCompleted(){}
    virtual void printDboxSetUpAboutToBeShown(){}
    virtual void printDboxSave(){}
    virtual void printDboxSetUp(){}
    virtual void printDboxPrint(){}
    virtual void progInfoAboutToBeShown(){}
    virtual void progInfoDialogueCompleted(){}
    virtual void progInfoLaunchWebPage(){}
    virtual void quitAboutToBeShown(){}
    virtual void quitQuit(){}
    virtual void quitDialogueCompleted(){}
    virtual void quitCancel(){}
    virtual void saveAsAboutToBeShown(){}
    virtual void saveAsDialogueCompleted(){}
    virtual void saveAsSaveToFile(){}
    virtual void saveAsFillBuffer(){}
    virtual void saveAsSaveCompleted(){}
    virtual void scaleAboutToBeShown(){}
    virtual void scaleDialogueCompleted(){}
    virtual void scaleApplyFactor(){}
    virtual void windowAboutToBeShown(){}
    virtual void windowHasBeenHidden(){}
    virtual void actionButtonSelected(){}
    virtual void adjusterClicked(){}
    virtual void draggableDragStarted(){}
    virtual void draggableDragEnded(){}
    virtual void numberRangeValueChanged(){}
    virtual void optionButtonStateChanged(){}
    virtual void popUpAboutToBeShown(){}
    virtual void radioButtonStateChanged(){}
    virtual void sliderValueChanged(){}
    virtual void stringSetValueChanged(){}
    virtual void stringSetAboutToBeShown(){}
    virtual void writableFieldValueChanged(){}

    virtual void scrollListSelection(){}

    virtual void treeViewNodeSelected(){}
    virtual void treeViewNodeExpanded(){}
    virtual void treeViewNodeRenamed(){}
    virtual void treeViewNodeClicked(){}
    virtual void treeViewNodeDragged(){}
    virtual void treeViewScroll(){}

    virtual void tabsSelection(){}

    virtual void toolActionSelection(){}

    virtual void reservedToolboxInterApplicationProtocol(){}
    virtual void reservedToolboxModuleEvent(){}
    virtual void unknownToolboxEvent(){}

    virtual void toolboxEventHandler(int event) = 0;
};

#endif
