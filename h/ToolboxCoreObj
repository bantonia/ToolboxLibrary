
#ifndef __cplusplus
#error Header file "ToolboxCoreObj.h" may only be used from C++
#endif
#pragma force_top_level
#pragma include_only_once

#ifndef __ToolboxCoreObj_h
#define __ToolboxCoreObj_h

#include "Object.h"
#include "toolbox.h"
#include "ToolboxEvents.h"
#include "ErrorReport.h"
#include "ClassType.h"

#ifndef UNUSED
#define UNUSED(x) ((x)=(x))
#endif


/** ToolboxCoreObj
*
* Library ToolboxC++Lib
*
* Class which defines a number of static member variables holding important values for a Toolbox/Wimp task.
* It also defines a number of static methods not linked to any particular Toolbox window type or gadget.
* All the Toolbox event methods which can be overloaded by a users Toolbox application are defined in this class.
* This class is extended by ToolboxTask, it is ToolboxTask which needs to be exended by users application.
*/

class ToolboxCoreObj : public ToolboxEvents, public Object, public ErrorReport {
  public:
    static void getSysInfo(unsigned int reason_code, _kernel_swi_regs *regs);
    static ObjectId createObject(unsigned int flags, void *name_or_template);
    static void deleteObject(unsigned int flags, ObjectId id);
    static void showObject(unsigned int flags, ObjectId id, int show_type, void *type, ObjectId parent, ComponentId parent_component);
    static void hideObject(unsigned int flags, ObjectId id);
    static unsigned int getObjectState(unsigned int flags, ObjectId id, unsigned int *state);
    static void setClientHandle(unsigned int flags, ObjectId id, void *client_handle);
    static unsigned int getClientHandle(unsigned int flags, ObjectId id, void *client_handle);
    static ObjectClass getObjectClass(unsigned int flags, ObjectId id);
    static ObjectClass getObjectClass(unsigned int flags, ObjectId id, ObjectClass *object_class);
    static void getParent(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *parent_component);
    static void getAncestor(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *ancestor_component);
    static void raiseToolboxEvent(unsigned int flags, ObjectId id, ComponentId component, ToolboxEvent *event);
    static void toolboxLoadResources(unsigned int flags, char *resources);
    static void *templateLookup(unsigned int flags, char *name);
    static int init(unsigned int flags, int *wimpMessages, int *toolboxEvents, char *directory, MessagesFD *mfd, IdBlock *idb);
    static int getWimpVersion();
    static void setWimpVersion(int version);
    static int getTaskHandle();
    static void *getSpriteAreaPtr();
    static void getPointerInfo(unsigned int flags, int& x_pos, int& y_pos, int& buttons, ObjectId& window, ComponentId& component);
    //static ToolboxObjectList *toolboxAutoGeneratedIds;
    static IdBlock idBlock;
    static int wimpMessages;
    static int toolboxEvents;
    static MessagesFD mfd;
    static WimpPollBlock pollBlock;
    static int eventCode;

        // Toolbox Events
    virtual void eToolboxEventHandler(void *pollBlock);
    virtual void toolboxError(){}

    //void toolboxObjectAutoCreated(int objClass);
    
    char* getClassName() { return "ToolboxCoreObj";}
    int getClassType() { return ClassType_ToolboxCoreObj;}
  private:
    static int wimpVersion;
    static int taskHandle;
    static void *spriteAreaPtr;
};

#endif
