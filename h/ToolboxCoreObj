
#ifndef __cplusplus
#error Header file "ToolboxCoreObj.h" may only be used from C++
#endif
#pragma force_top_level
#pragma include_only_once

#ifndef __ToolboxCoreObj_h
#define __ToolboxCoreObj_h

#include "Object.h"
#include "toolbox.h"
#include "ErrorReport.h"

#ifndef UNUSED
#define UNUSED(x) ((x)=(x))
#endif

class ToolboxCoreObj : public Object, public ErrorReport {
  public:
    static void getSysInfo(unsigned int reason_code, _kernel_swi_regs *regs);
    static ObjectId createObject(unsigned int flags, void *name_or_template);
    static void deleteObject(unsigned int flags, ObjectId id);
    static void showObject(unsigned int flags, ObjectId id, int show_type, void *type, ObjectId parent, ComponentId parent_component);
    static void hideObject(unsigned int flags, ObjectId id);
    static unsigned int getObjectState(unsigned int flags, ObjectId id, unsigned int *state);
    static void setClientHandle(unsigned int flags, ObjectId id, void *client_handle);
    static unsigned int getClientHandle(unsigned int flags, ObjectId id, void *client_handle);
    static ObjectClass getObjectClass(unsigned int flags, ObjectId id);
    static ObjectClass getObjectClass(unsigned int flags, ObjectId id, ObjectClass *object_class);
    static void getParent(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *parent_component);
    static void getAncestor(unsigned int flags, ObjectId id, ObjectId *parent, ComponentId *ancestor_component);
    static void raiseToolboxEvent(unsigned int flags, ObjectId id, ComponentId component, ToolboxEvent *event);
    static void toolboxLoadResources(unsigned int flags, char *resources);
    static void *templateLookup(unsigned int flags, char *name);
    static int init(unsigned int flags, int *wimpMessages, int *toolboxEvents, char *directory, MessagesFD *mfd, IdBlock *idb);
    static int getWimpVersion();
    static void setWimpVersion(int version);
    static int getTaskHandle();
    static void *getSpriteAreaPtr();
    static void getPointerInfo(unsigned int flags, int& x_pos, int& y_pos, int& buttons, ObjectId& window, ComponentId& component);
    //static ToolboxObjectList *toolboxAutoGeneratedIds;
    static IdBlock idBlock;
    static int wimpMessages;
    static int toolboxEvents;
    static MessagesFD mfd;
    static WimpPollBlock pollBlock;
    static int eventCode;

        // Toolbox Events
    virtual void eToolboxEventHandler(void *pollBlock);
    virtual void toolboxError(){};
    //virtual void toolboxObjectAutoCreated();
    virtual void colourDboxObjectAutoCreated(){};
    virtual void colourMenuObjectAutoCreated(){};
    virtual void dcsObjectAutoCreated(){};
    virtual void fileInfoObjectAutoCreated(){};
    virtual void fontDboxObjectAutoCreated(){};
    virtual void fontMenuObjectAutoCreated(){};
    virtual void iconbarObjectAutoCreated(){};
    virtual void menuObjectAutoCreated(){};
    virtual void printDboxObjectAutoCreated(){};
    virtual void progInfoObjectAutoCreated(){};
    virtual void quitObjectAutoCreated(){};
    virtual void saveAsObjectAutoCreated(){};
    virtual void scaleObjectAutoCreated(){};
    virtual void windowObjectAutoCreated(){};
    virtual void unknownClassObjectAutoCreated(){};
    virtual void toolboxObjectDeleted(){};
    virtual void toolboxUserEvent(){};
    virtual void colourDboxAboutToBeShown(){};
    virtual void colourDboxDialogueCompleted(){};
    virtual void colourDboxColourSelected(){};
    virtual void colourMenuAboutToBeShown(){};
    virtual void colourMenuHasBeenHidden(){};
    virtual void colourMenuSelection(){};
    virtual void dcsAboutToBeShown(){};
    virtual void dcsDiscard(){};
    virtual void dcsSave(){};
    virtual void dcsDialogueCompleted(){};
    virtual void dcsCancel(){};
    virtual void fileInfoAboutToBeShown(){};
    virtual void fileInfoDialogueCompleted(){};
    virtual void fontDboxAboutToBeShown(){};
    virtual void fontDboxDialogueCompleted(){};
    virtual void fontDboxApplyFont(){};
    virtual void fontMenuAboutToBeShown(){};
    virtual void fontMenuHasBeenHidden(){};
    virtual void fontMenuFontSelection(){};
    virtual void iconbarClicked(){};
    virtual void iconbarSelectAboutToBeShown(){};
    virtual void iconbarAdjustAboutToBeShown(){};
    virtual void menuAboutToBeShown(){};
    virtual void menuHasBeenHidden(){};
    virtual void menuSubMenu(){};
    virtual void menuSelection(){};
    virtual void printDboxAboutToBeShown(){};
    virtual void printDboxDialogueCompleted(){};
    virtual void printDboxSetUpAboutToBeShown(){};
    virtual void printDboxSave(){};
    virtual void printDboxSetUp(){};
    virtual void printDboxPrint(){};
    virtual void progInfoAboutToBeShown(){};
    virtual void progInfoDialogueCompleted(){};
    virtual void quitAboutToBeShown(){};
    virtual void quitQuit(){};
    virtual void quitDialogueCompleted(){};
    virtual void quitCancel(){};
    virtual void saveAsAboutToBeShown(){};
    virtual void saveAsDialogueCompleted(){};
    virtual void saveAsSaveToFile(){};
    virtual void saveAsFillBuffer(){};
    virtual void saveAsSaveCompleted(){};
    virtual void scaleAboutToBeShown(){};
    virtual void scaleDialogueCompleted(){};
    virtual void scaleApplyFactor(){};
    virtual void windowAboutToBeShown(){};
    virtual void windowHasBeenHidden(){};
    virtual void actionButtonSelected(){};
    virtual void adjusterClicked(){};
    virtual void draggableDragStarted(){};
    virtual void draggableDragEnded(){};
    virtual void numberRangeValueChanged(){};
    virtual void optionButtonStateChanged(){};
    virtual void popUpAboutToBeShown(){};
    virtual void radioButtonStateChanged(){};
    virtual void sliderValueChanged(){};
    virtual void stringSetValueChanged(){};
    virtual void stringSetAboutToBeShown(){};
    virtual void writableFieldValueChanged(){};
    virtual void tabsSelection(){};
    virtual void treeViewNodeSelected(){};
    virtual void treeViewNodeExpanded(){};
    virtual void treeViewNodeRenamed(){};
    virtual void treeViewNodeClicked(){};
    virtual void treeViewNodeDragged(){};
    virtual void treeViewScroll(){};
    virtual void reservedToolboxInterApplicationProtocol(){};
    virtual void reservedToolboxModuleEvent(){};
    virtual void unknownToolboxEvent(){};
  private:
    static int wimpVersion;
    static int taskHandle;
    static void *spriteAreaPtr;
};

#endif
